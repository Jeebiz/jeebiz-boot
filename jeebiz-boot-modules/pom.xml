<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>io.hiwepy</groupId>
		<artifactId>jeebiz-boot-dependencies</artifactId>
		<version>1.0.2-SNAPSHOT</version>
		<relativePath>../jeebiz-boot-dependencies</relativePath>
	</parent>

	<artifactId>jeebiz-boot-modules</artifactId>
	<packaging>pom</packaging>

	<modules>
		<module>jeebiz-boot-api</module>
		<module>jeebiz-boot-crypto-autoconfigure</module>
		<module>jeebiz-boot-external-autoconfigure</module>
		<module>jeebiz-boot-jackson-autoconfigure</module>
		<module>jeebiz-boot-license-autoconfigure</module>
		<module>jeebiz-boot-plugin-api</module>
		<module>jeebiz-boot-webflux-autoconfigure</module>
		<module>jeebiz-boot-webmvc-autoconfigure</module>
	</modules>

	<dependencies>

		<!-- For Lombok -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<scope>provided</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>
		<!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<optional>true</optional>
		</dependency>
		<!-- For Spring Boot Test-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
        <dependency>
        	<groupId>org.springframework.boot</groupId>
        	<artifactId>spring-boot-configuration-processor</artifactId>
        	<optional>true</optional>
        </dependency>

	</dependencies>

	<build>
		<pluginManagement>
			<plugins>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-assembly-plugin -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-assembly-plugin</artifactId>
					<configuration>
						<!-- get all project dependencies -->
						<descriptorRefs>
							<descriptorRef>jar-with-dependencies</descriptorRef>
						</descriptorRefs>
					</configuration>
					<executions>
						<execution>
							<id>make-assembly</id>
							<!-- bind to the packaging phase -->
							<phase>package</phase>
							<goals>
								<goal>single</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-compiler-plugin -->
				<plugin>
					<!-- 编译插件：编译主代码至主输出目录 -->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<!-- 设置源文件编码方式 -->
					<configuration>
						<!-- 源代码编译版本 -->
						<source>${java.version}</source>
						<!-- 目标平台编译版本 -->
						<target>${java.version}</target>
						<!-- 字符集编码 -->
						<encoding>${project.build.sourceEncoding}</encoding>
						<!-- -->
						<maxmem>512M</maxmem>
					</configuration>
				</plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-deploy-plugin -->
				<plugin>
					<!-- 发布插件 ：将项目输出构件部署到远程仓库 -->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-deploy-plugin</artifactId>
				</plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-enforcer-plugin -->
				<plugin>
					<!-- 环境检查插件：代码编译前的环境监察-->
					<groupId>org.apache.maven.plugins</groupId>
	                <artifactId>maven-enforcer-plugin</artifactId>
	                <executions>
	                    <execution>
	                        <id>default-cli</id>
	                        <goals>
	                            <goal>enforce</goal>
	                        </goals>
	                        <phase>validate</phase>
	                        <configuration>
	                            <rules>
	                            	<requireMavenVersion>
	                            		<message>
	                                        <![CDATA[You are running an older version of Maven. This application requires at least Maven ${maven.version}.]]>
	                                    </message>
										<version>[${maven.version}.0,)</version>
									</requireMavenVersion>
	                                <requireJavaVersion>
	                                    <message>
	                                        <![CDATA[You are running an older version of Java. This application requires at least JDK ${java.version}.]]>
	                                    </message>
	                                    <version>[${java.version}.0,)</version>
	                                </requireJavaVersion>
	                            </rules>
	                        </configuration>
	                    </execution>
	                </executions>
	            </plugin>
	            <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-install-plugin -->
				<plugin>
		            <!-- 安装插件：将项目输出构件安装到本地仓库 -->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-install-plugin</artifactId>
				</plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-jar-plugin -->
				<plugin>
		            <!-- jar包生成插件 ：创建项目jar包 -->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<!-- 打包jar文件时，配置manifest文件，加入lib包的jar依赖 -->
					<configuration>
						<archive>
							<manifest>
								<addClasspath>true</addClasspath>
								<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
					            <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
								<classpathPrefix>lib/</classpathPrefix>
							</manifest>
						</archive>
					</configuration>
					<executions>
						<execution>
							<phase>package</phase>
						</execution>
					</executions>
				</plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-javadoc-plugin -->
				<plugin>
					<!-- 文档插件:发布时自动生成文档 -->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-javadoc-plugin</artifactId>
					<configuration>
						<charset>${project.build.sourceEncoding}</charset>
						<encoding>${project.build.sourceEncoding}</encoding>
						<docencoding>${project.build.sourceEncoding}</docencoding>
					</configuration>
					<executions>
						<execution>
							<id>attach-javadocs</id>
							<phase>package</phase>
							<goals>
								<goal>jar</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-resources-plugin -->
				<plugin>
					<!-- 资源插件：复制主资源文件至主输出目录 -->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<!-- 解决资源文件的编码问题 -->
					<configuration>
						<!-- 字符集编码 -->
						<encoding>${project.build.sourceEncoding}</encoding>
					</configuration>
				</plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-source-plugin -->
				<plugin>
					<!-- 源码插件:发布时自动将源码同时发布 -->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-source-plugin</artifactId>
					<executions>
						<execution>
							<id>attach-sources</id>
							<phase>package</phase>
							<goals>
								<goal>jar-no-fork</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-surefire-plugin -->
				<plugin>
					<!-- 单元测试插件 ：执行测试用例 -->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<configuration>
						<!-- 跳过单元测试 -->
						<skip>true</skip>
						<skipTests>true</skipTests>
						<!-- forkMode 可设置值有 “never”， “once”， “always” 和 “pertest”。 pretest：
							每一个测试创建一个新进程，为每个测试创建新的JVM是单独测试的最彻底方式，但也是最慢的，不适合hudson上持续回归。 once：在一个进程中进行所有测试。once为默认设置，在Hudson上持续回归时建议使用默认设置。
							always：在一个进程中并行的运行脚本，Junit4.7以上版本才可以使用，surefire的版本要在2.6以上提供这个功能，其中 threadCount：执行时，指定可分配的线程数量。只和参数parallel配合使用有效。默认：5。 -->
						<forkMode>once</forkMode>
						<argLine>-Xmx1024M -XX:MetaspaceSize=256M -XX:MaxMetaspaceSize=256M</argLine>
						<additionalClasspathElements>
							<additionalClasspathElement>
								${basedir}/target/test-classes
							</additionalClasspathElement>
						</additionalClasspathElements>
						<includes>
							<include>**/*Test.java</include>
						</includes>
						<excludes>
							<exclude>**/TestBean.java</exclude>
						</excludes>
					</configuration>
				</plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-gpg-plugin -->
				<plugin>
					<!-- Gpg Signature -->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-gpg-plugin</artifactId>
					<executions>
						<execution>
							<id>sign-artifacts</id>
							<phase>verify</phase>
							<goals>
								<goal>sign</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<!-- Spring Boot 代码质量检查 -->

				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-checkstyle-plugin -->
				<plugin>
					<!-- 代码格式检查  -->
				    <groupId>org.apache.maven.plugins</groupId>
				    <artifactId>maven-checkstyle-plugin</artifactId>
				</plugin>
				<!-- https://mvnrepository.com/artifact/org.codehaus.mojo/cobertura-maven-plugin -->
				<plugin>
					<!-- 代码覆盖率 -->
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>cobertura-maven-plugin</artifactId>
					<configuration>
						<formats>
							<format>html</format>
							<format>xml</format>
						</formats>
						<check>
							<branchRate>85</branchRate>
							<lineRate>85</lineRate>
							<haltOnFailure>true</haltOnFailure>
							<totalBranchRate>85</totalBranchRate>
							<totalLineRate>85</totalLineRate>
							<packageLineRate>85</packageLineRate>
							<packageBranchRate>85</packageBranchRate>
							<regexes>
								<regex>
									<pattern>com.example.reallyimportant.*</pattern>
									<branchRate>90</branchRate>
									<lineRate>80</lineRate>
								</regex>
								<regex>
									<pattern>com.example.boringcode.*</pattern>
									<branchRate>40</branchRate>
									<lineRate>30</lineRate>
								</regex>
							</regexes>
						</check>
					</configuration>
					<executions>
						<execution>
							<goals>
								<goal>clean</goal>
								<goal>check</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<!-- https://mvnrepository.com/artifact/org.owasp/dependency-check-maven -->
	            <plugin>
					<!-- 依赖检查：检查是否有依赖有漏洞的第三方包 -->
				    <groupId>org.owasp</groupId>
				    <artifactId>dependency-check-maven</artifactId>
				    <configuration>
                      	<format>HTML</format>
				    	<outputDirectory>${project.build.directory}/dependency-check</outputDirectory>
			 		</configuration>
				    <executions>
				        <execution>
				            <goals>
				                <goal>check</goal>
				            </goals>
				        </execution>
				    </executions>
				</plugin>
				<!-- https://mvnrepository.com/artifact/org.codehaus.mojo/findbugs-maven-plugin -->
		        <plugin>
					<!-- 代码检查：检查类或者 JAR 文件 -->
		            <groupId>org.codehaus.mojo</groupId>
		            <artifactId>findbugs-maven-plugin</artifactId>
		            <configuration>
		                <!-- 设置分析工作的等级，可以为Min、Default和Max -->
		                <effort>Low</effort>
		                <!-- Low、Medium和High (Low最严格) -->
		                <threshold>Medium</threshold>
		                <failOnError>true</failOnError>
		                <includeTests>true</includeTests>
		                <!--findbugs需要忽略的错误的配置文件-->
		                <excludeFilterFile>findbugs/findbugs-exclude-filter.xml</excludeFilterFile>
		            </configuration>
		            <executions>
		                <execution>
		                    <id>run-findbugs</id>
		                    <!-- 在package 阶段触发执行findbugs检查，比如执行 mvn clean package -->
		                    <phase>package</phase>
		                    <goals>
		                        <goal>check</goal>
		                    </goals>
		                </execution>
		            </executions>
		        </plugin>
				<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-pmd-plugin -->
				<plugin>
					<!-- 源码分析  -->
				    <groupId>org.apache.maven.plugins</groupId>
				    <artifactId>maven-pmd-plugin</artifactId>
				</plugin>

			</plugins>
		</pluginManagement>
		<plugins>
			<!--环境监察插件：代码编译前的环境监察-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
			</plugin>
			<!-- 编译插件：编译主代码至主输出目录 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>
			<!-- 资源插件：复制主资源文件至主输出目录 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
			</plugin>
			<!-- 单元测试插件 ：执行测试用例 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
			</plugin>
			<!-- findbugs插件 ：代码检查
	        <plugin>
	            <groupId>org.codehaus.mojo</groupId>
	            <artifactId>findbugs-maven-plugin</artifactId>
            </plugin> -->
            <!-- dependency-check 插件 ：依赖检查
            <plugin>
			    <groupId>org.owasp</groupId>
			    <artifactId>dependency-check-maven</artifactId>
		    </plugin>-->
			<!-- jar包生成插件 ：创建项目jar包 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
			</plugin>
			<!-- 源码插件:发布时自动将源码同时发布 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
			</plugin>
			<!-- 安装插件：将项目输出构件安装到本地仓库 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-install-plugin</artifactId>
			</plugin>
			<!-- 发布插件 ：将项目输出构件部署到远程仓库 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
